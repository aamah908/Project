package project1;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class my_main {

    public static short [][] grayImage;
    public static int width;
    public static int height;
    private static BufferedImage image;
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		
		String fileNameInp = "TenCardG.jpg";
        File inp = new File(fileNameInp);
        BufferedImage image_source = ImageIO.read(inp);
        int width_source = image_source.getWidth();
        int height_source = image_source.getHeight(); 
		short [][] source_img = readColourImage(fileNameInp);        
		
			
		String fileNameTemplate = "Template.jpg";
        File inp2 = new File(fileNameTemplate);
        BufferedImage image_template = ImageIO.read(inp2);
        int width_template = image_template.getWidth();
        int height_template = image_template.getHeight(); 
		short [][] template_img = readColourImage(fileNameTemplate);

	}

// YOU NEED TO COMPLETE THE PROJECT AS PER THE PROJECT PART I SHEET 
// Absolute difference Matrix when used in Java
	
// for i=0:(r1-r2+1)
		// for j=0:(c1-c2)
	
	
public static short[][] readColourImage(String fileName) {
      
        try
        {
         // RGB pixel values
         byte[] pixels;

         File inp = new File(fileName);
         image = ImageIO.read(inp);
         width = image.getWidth();
         height = image.getHeight();          
        
         
         pixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
         System.out.println("Dimension of the image: WxH = " + width + "x" + height + " | Num of pixels: " + pixels.length);
     
     
         //rgb2gray in a 2D array grayImage                 
         int pr; // red
         int pg; // green
         int pb; // blue     

        grayImage =new short [height][width];
        int coord;
        for (int i=0 ; i < height ; i++)
     	   for (int j=0 ; j < width ; j++)
     	   {        		     
     		   coord= 3*(i*width+j);
     		   pr= ((short) pixels[coord] & 0xff); // red
               pg= (((short) pixels[coord+1] & 0xff)); // green
               pb= (((short) pixels[coord+2] & 0xff)); // blue                
                
     		   grayImage[i][j]=(short)Math.round(0.299 *pr + 0.587 * pg  + 0.114 * pb);         
     		   
     	   }  
        }
        catch (IOException e) {
            e.printStackTrace();
            } 
        
        return grayImage;
	}

}